package pk.habsoft.demo.estore.exceptions;

import java.io.IOException;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import pk.habsoft.demo.estore.core.ResponseBuilder;

/**
 * The Class is responsible to catch all kinds of exceptions raised from all
 * Controllers. Specific response can be generated by specifying exception type
 * in @ExceptionHandlers.
 */
@ControllerAdvice()
public class RestExceptionHandler {

	/** The Constant LOGGER. */
	public static final Logger LOGGER = Logger.getLogger(RestExceptionHandler.class);

	/**
	 * Exception handler.
	 *
	 * @param exception
	 *            the exception
	 * @return the response entity
	 */
	@ExceptionHandler(ECoreException.class)
	public ResponseEntity<?> exceptionHandler(Exception exception) {
		LOGGER.error("Invoking error handler for : ECoreException");
		// exception.printStackTrace();
		return ResponseBuilder.error(exception.getMessage());

	}

	/**
	 * fs Handle null pointer exception.
	 *
	 * @param ex
	 *            the ex
	 * @return the response entity
	 */
	@ExceptionHandler(NullPointerException.class)
	public ResponseEntity<?> handleNullPointerException(Exception ex) {
		ex.printStackTrace();
		return ResponseBuilder.error(ex.getMessage());

	}

	@ExceptionHandler(DataIntegrityViolationException.class)
	public ResponseEntity<?> handleDatabaseException(Exception ex) {
		ex.printStackTrace();
		return ResponseBuilder.error(ex.getMessage());

	}

	@ExceptionHandler(IllegalArgumentException.class)
	void handleIllegalArgumentException(HttpServletResponse response) throws IOException {
		response.sendError(HttpStatus.BAD_REQUEST.value());
	}

	@ExceptionHandler(ApiAuthorizationException.class)
	void handleApiAuthorizationException(HttpServletResponse response) throws IOException {
		response.sendError(HttpStatus.UNAUTHORIZED.value());
	}

}
